C251 COMPILER V5.60.0,  SEEKFREE_PRINTF                                                    15/07/23  15:59:09  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE SEEKFREE_PRINTF
OBJECT MODULE PLACED IN .\Out_File\SEEKFREE_PRINTF.obj
COMPILER INVOKED BY: D:\Keil\C251\BIN\C251.EXE ..\..\Libraries\seekfree_peripheral\SEEKFREE_PRINTF.c XSMALL INTR2 WARNIN
                    -GLEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\s
                    -eekfree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\CODE) DEBUG PRINT(.\Out_File\SEEKFREE_PRINTF.lst) OBJECT(.\Out_Fil
                    -e\SEEKFREE_PRINTF.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2018,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                SEEKFREE_PRINTF
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ3184284598)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2019-04-30
   18           * @note                    示波器下载地址：https://pan.baidu.com/s/198CMXTZsbI3HAEqNXDngBw（包含清华直立方案资料）
   19           ********************************************************************************************************
             -************/
   20          
   21          
   22          
   23          #include <stdarg.h>
   24          #include <string.h>
   25          
   26          #include "SEEKFREE_PRINTF.h"
   27          
   28          
   29          uint8 number_conversion_ascii(uint32 dat, int8 *p, uint8 neg_type, uint8 radix)
   30          {
   31   1          int32   neg_dat;
   32   1          uint32  pos_dat;
   33   1          uint8   temp_data = 0;
   34   1          uint8   valid_num = 0;
   35   1          
   36   1          if(neg_type)
   37   1          {
   38   2              neg_dat = (int32)dat;
   39   2              if(neg_dat<0)   neg_dat = -neg_dat;
   40   2              while(1)
   41   2              {
   42   3                  *p = neg_dat%radix + '0';
   43   3                  neg_dat = neg_dat/radix;
   44   3                  valid_num++;
   45   3                  
   46   3                  if(!neg_dat) break;
   47   3                  p++;
   48   3              }
   49   2          }
   50   1          else
   51   1          {
   52   2              pos_dat = dat;
   53   2              while(1)
   54   2              {
C251 COMPILER V5.60.0,  SEEKFREE_PRINTF                                                    15/07/23  15:59:09  PAGE 2   

   55   3                  temp_data = pos_dat%radix;
   56   3                  if(10 <= temp_data) temp_data += 'A'-10;
   57   3                  else                temp_data += '0';
   58   3                  
   59   3                  *p = temp_data;
   60   3                  
   61   3                  pos_dat = pos_dat/radix;
   62   3                  valid_num++;
   63   3                  
   64   3                  if(!pos_dat) break;
   65   3                  p++;
   66   3              }
   67   2          }
   68   1          return valid_num;
   69   1      }
   70          
   71          void printf_reverse_order(int8 *d_buff, uint32 len)
   72          {
   73   1          uint32 i;
   74   1          int8  temp_data;
   75   1          for(i=0;i<len/2;i++)
   76   1          {
   77   2              temp_data = d_buff[len-1-i];
   78   2              d_buff[len-1-i] = d_buff[i];
   79   2              d_buff[i] = temp_data; 
   80   2          }
   81   1      }
   82          
   83          
   84          //void printf(const int8 *format, ...)
   85          //{
   86          //#if(PRINTF)     //如果宏定义PRINTF为0 则不编译printf函数内容，调用printf没有任何操作
   87          //    va_list arg;
   88          //      va_start(arg, format);
   89          //    
   90          //      while (*format)
   91          //      {
   92          //              int8 ret = *format;
   93          //              if (ret == '%')
   94          //              {
   95          //                      switch (*++format)
   96          //                      {
   97          //                case 'a':// 十六进制p计数法输出浮点数 暂未实现
   98          //                {
   99          //                    
  100          //                    
  101          //                }break;
  102          //                
  103          //                
  104          //                case 'c':// 一个字符
  105          //                {
  106          //                    int8 ch = (int8)va_arg(arg, uint32);
  107          //                    uart_putchar(DEBUG_UART, (int8)ch);
  108          //                            
  109          //                }break;
  110          //                
  111          //                
  112          //                case 'd':
  113          //                case 'i':// 有符号十进制整数
  114          //                {
  115          //                    int8 vstr[33];
  116          //                    int32 ival = (int32)va_arg(arg, int32);
  117          //                    uint8 vlen = number_conversion_ascii((uint32)ival, vstr, 1, 10);
  118          //                    if(ival<0)  uart_putchar(DEBUG_UART, '-');
  119          //                    printf_reverse_order(vstr,vlen);
  120          //                    uart_putbuff(DEBUG_UART, (uint8 *)vstr,vlen);
C251 COMPILER V5.60.0,  SEEKFREE_PRINTF                                                    15/07/23  15:59:09  PAGE 3   

  121          //                }break;
  122          //                
  123          //                case 'f':// 浮点数，输出小数点后六位  不能指定输出精度
  124          //                case 'F':// 浮点数，输出小数点后六位  不能指定输出精度
  125          //                {
  126          //                    int8 vstr[33];
  127          //                    double ival = (double)va_arg(arg, double);
  128          //                    uint8 vlen = number_conversion_ascii((uint32)(int32)ival, vstr, 1, 10);
  129          //                    if(ival<0)  uart_putchar(DEBUG_UART, '-');
  130          //                    printf_reverse_order(vstr,vlen);
  131          //                    uart_putbuff(DEBUG_UART, (uint8 *)vstr,vlen);
  132          //                    uart_putchar(DEBUG_UART, '.');
  133          
  134          //                    ival = ((double)ival - (int32)ival)*1000000;
  135          //                    vlen = number_conversion_ascii((uint32)(int32)ival, vstr, 1, 10);
  136          //                                    while(6>vlen)
  137          //                    {
  138          //                        vstr[vlen] = '0';
  139          //                        vlen++;
  140          //                    }
  141          //                    printf_reverse_order(vstr,vlen);
  142          //                    uart_putbuff(DEBUG_UART, (uint8 *)vstr,vlen);
  143          //                    break;
  144          //                }
  145          //                
  146          //                case 'u':// 无符号十进制整数
  147          //                {
  148          //                    int8 vstr[33];
  149          //                    uint32 ival = (uint32)va_arg(arg, uint32);
  150          //                    uint8 vlen = number_conversion_ascii(ival, vstr, 0, 10);
  151          //                    printf_reverse_order(vstr,vlen);
  152          //                    uart_putbuff(DEBUG_UART, (uint8 *)vstr,vlen);
  153          //                }break;
  154          //                
  155          //                case 'o':// 无符号八进制整数 
  156          //                {
  157          //                    int8 vstr[33];
  158          //                    uint32 ival = (uint32)va_arg(arg, uint32);
  159          //                    uint8 vlen = number_conversion_ascii(ival, vstr, 0, 8);
  160          //                    printf_reverse_order(vstr,vlen);
  161          //                    uart_putbuff(DEBUG_UART, (uint8 *)vstr,vlen);
  162          //                    
  163          //                }break;
  164          //                
  165          //                case 'x':// 无符号十六进制整数
  166          //                case 'X':// 无符号十六进制整数
  167          //                {
  168          //                    int8 vstr[33];
  169          //                    uint32 ival = (uint32)va_arg(arg, uint32);
  170          //                    uint8 vlen = number_conversion_ascii(ival, vstr, 0, 16);
  171          //                    printf_reverse_order(vstr,vlen);
  172          //                    uart_putbuff(DEBUG_UART, (uint8 *)vstr,vlen);
  173          //                }break;
  174          //                
  175          //                
  176          //                case 's':// 字符串
  177          //                {
  178          //                    int8 *pc = va_arg(arg, int8 *);
  179          //                    while (*pc)
  180          //                    {
  181          //                        uart_putchar(DEBUG_UART, (int8)(*pc));
  182          //                        pc++;
  183          //                    }
  184          //                }break;
  185          //                
  186          //                case 'p':// 以16进制形式输出指针
C251 COMPILER V5.60.0,  SEEKFREE_PRINTF                                                    15/07/23  15:59:09  PAGE 4   

  187          //                {
  188          //                    int8 vstr[33];
  189          //                    uint32 ival = (uint32)va_arg(arg, uint32);
  190          //                    uint8 vlen = number_conversion_ascii(ival, vstr, 0, 16);
  191          //                    printf_reverse_order(vstr,8);
  192          //                    uart_putbuff(DEBUG_UART, (uint8 *)vstr,8);
  193          //                            
  194          //                }break;
  195          //                
  196          //                
  197          //                case '%':// 输出字符% 
  198          //                {
  199          //                    uart_putchar(DEBUG_UART, '%');
  200          //                }break;
  201          
  202          //                default:break;
  203          //                      }
  204          //              }
  205          //              else
  206          //              {
  207          //                      uart_putchar(DEBUG_UART, (int8)(*format));
  208          //              }
  209          //              format++;
  210          //      }
  211          //      va_end(arg);
  212          //#endif
  213          //}
  214          
  215          
  216          uint32 zf_sprintf(char  *buff, const int8 *format, ...)
  217          {
  218   1          uint32 buff_len=0;
  219   1          va_list arg;
  220   1              va_start(arg, format);
  221   1       
  222   1              while (*format)
  223   1              {
  224   2                      int8 ret = *format;
  225   2                      if (ret == '%')
  226   2                      {
  227   3                              switch (*++format)
  228   3                              {
  229   4                      case 'a':// 十六进制p计数法输出浮点数 暂未实现
  230   4                      {
  231   5                          
  232   5                          
  233   5                      }break;
  234   4                      
  235   4                      
  236   4                      case 'c':// 一个字符
  237   4                      {
  238   5                          int8 ch = (int8)va_arg(arg, uint32);
  239   5                          *buff = ch;
  240   5                          buff++;
  241   5                          buff_len++;
  242   5                                  
  243   5                      }break;
  244   4                      
  245   4                      
  246   4                      case 'd':
  247   4                      case 'i':// 有符号十进制整数
  248   4                      {
  249   5                          int8 vstr[33];
  250   5                          int32 ival = (int32)va_arg(arg, int32);
  251   5                          uint8 vlen = number_conversion_ascii((uint32)ival, vstr, 1, 10);
  252   5                          
C251 COMPILER V5.60.0,  SEEKFREE_PRINTF                                                    15/07/23  15:59:09  PAGE 5   

  253   5                          if(ival<0)  
  254   5                          {
  255   6                              vstr[vlen] = '-';
  256   6                              vlen++;
  257   6                          }
  258   5                          printf_reverse_order(vstr,vlen);
  259   5                          memcpy(buff,vstr,vlen);
  260   5                          buff += vlen;
  261   5                          buff_len += vlen;
  262   5                          
  263   5                          
  264   5                      }break;
  265   4                      
  266   4                      case 'f':// 浮点数，输出小数点后六位  不能指定输出精度
  267   4                      case 'F':// 浮点数，输出小数点后六位  不能指定输出精度
  268   4                      {
  269   5                          int8 vstr[33];
  270   5                          double ival = (double)va_arg(arg, double);
  271   5                          uint8 vlen = number_conversion_ascii((uint32)(int32)ival, vstr, 1, 10);
  272   5                          
  273   5                          if(ival<0)  
  274   5                          {
  275   6                              vstr[vlen] = '-';
  276   6                              vlen++;
  277   6                          }
  278   5                          printf_reverse_order(vstr,vlen);
  279   5                          memcpy(buff,vstr,vlen);
  280   5                          buff += vlen;
  281   5                          buff_len += vlen;
  282   5      
  283   5                          ival = ((double)ival - (int32)ival)*1000000;
  284   5                          if(ival)
  285   5                          {
  286   6                              vlen = number_conversion_ascii((uint32)(int32)ival, vstr, 1, 10);
  287   6                          }
  288   5                          else
  289   5                          {
  290   6                              vstr[0] = vstr[1] = vstr[2] = vstr[3] = vstr[4] = vstr[5] = '0';
  291   6                              vlen = 6;
  292   6                          }
  293   5                                              
  294   5                          while(6>vlen)
  295   5                          {
  296   6                              vstr[vlen] = '0';
  297   6                              vlen++;
  298   6                          }
  299   5                                              
  300   5                          vstr[vlen] = '.';
  301   5                          vlen++;
  302   5                          
  303   5                          printf_reverse_order(vstr,vlen);
  304   5                          memcpy(buff,vstr,vlen);
  305   5                          buff_len += vlen;
  306   5      
  307   5                          break;
  308   5                      }
  309   4                      
  310   4                      case 'u':// 无符号十进制整数
  311   4                      {
  312   5                          int8 vstr[33];
  313   5                          uint32 ival = (uint32)va_arg(arg, uint32);
  314   5                          uint8 vlen = number_conversion_ascii(ival, vstr, 0, 10);
  315   5                          
  316   5                          printf_reverse_order(vstr,vlen);
  317   5                          memcpy(buff,vstr,vlen);
  318   5                          buff += vlen;
C251 COMPILER V5.60.0,  SEEKFREE_PRINTF                                                    15/07/23  15:59:09  PAGE 6   

  319   5                          buff_len += vlen;
  320   5                      }break;
  321   4                      
  322   4                      case 'o':// 无符号八进制整数 
  323   4                      {
  324   5                          int8 vstr[33];
  325   5                          uint32 ival = (uint32)va_arg(arg, uint32);
  326   5                          uint8 vlen = number_conversion_ascii(ival, vstr, 0, 8);
  327   5                          
  328   5                          printf_reverse_order(vstr,vlen);
  329   5                          memcpy(buff,vstr,vlen);
  330   5                          buff += vlen;
  331   5                          buff_len += vlen;
  332   5                          
  333   5                      }break;
  334   4                      
  335   4                      case 'x':// 无符号十六进制整数
  336   4                      case 'X':// 无符号十六进制整数
  337   4                      {
  338   5                          int8 vstr[33];
  339   5                          uint32 ival = (uint32)va_arg(arg, uint32);
  340   5                          uint8 vlen = number_conversion_ascii(ival, vstr, 0, 16);
  341   5                          
  342   5                          printf_reverse_order(vstr,vlen);
  343   5                          memcpy(buff,vstr,vlen);
  344   5                          buff += vlen;
  345   5                          buff_len += vlen;
  346   5                      }break;
  347   4                      
  348   4                      
  349   4                      case 's':// 字符串
  350   4                      {
  351   5                          int8 *pc = va_arg(arg, int8 *);
  352   5                          while (*pc)
  353   5                          {
  354   6                              *buff = *pc;
  355   6                              buff++;
  356   6                              buff_len++;
  357   6                              pc++;
  358   6                          }
  359   5                      }break;
  360   4                      
  361   4                      case 'p':// 以16进制形式输出指针
  362   4                      {
  363   5                          int8 vstr[33];
  364   5                          uint32 ival = (uint32)va_arg(arg, uint32);
  365   5                          //uint8 vlen = number_conversion_ascii(ival, vstr, 0, 16);
  366   5                                              number_conversion_ascii(ival, vstr, 0, 16);
  367   5                          
  368   5                          printf_reverse_order(vstr,8);
  369   5                          memcpy(buff,vstr,8);
  370   5                          buff += 8;
  371   5                          buff_len += 8;
  372   5                                  
  373   5                      }break;
  374   4                      
  375   4                      
  376   4                      case '%':// 输出字符% 
  377   4                      {
  378   5                          *buff = '%';
  379   5                          buff++;
  380   5                          buff_len++;
  381   5                      }break;
  382   4      
  383   4                      default:break;
  384   4                              }
C251 COMPILER V5.60.0,  SEEKFREE_PRINTF                                                    15/07/23  15:59:09  PAGE 7   

  385   3                      }
  386   2                      else
  387   2                      {
  388   3                  *buff = (int8)(*format);
  389   3                  buff++;
  390   3                  buff_len++;
  391   3                      }
  392   2                      format++;
  393   2              }
  394   1              va_end(arg);
  395   1      
  396   1          return buff_len;
  397   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2045     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       128     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
